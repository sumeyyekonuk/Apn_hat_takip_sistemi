// Express modÃ¼lÃ¼nÃ¼ projeye dahil ediyoruz
const express = require('express');

// Express Router nesnesini oluÅŸturuyoruz
const router = express.Router();

// Raporlama iÅŸlemlerini yÃ¶netecek controller dosyasÄ±nÄ± dahil ediyoruz
const reportsController = require('../controllers/reportsController');

// Kimlik doÄŸrulama ve yetkilendirme kontrolÃ¼ yapan middleware'i dahil ediyoruz
const auth = require('../middleware/auth');

/**
 * @swagger
 * tags:
 *   name: Reports
 *   description: Raporlama iÅŸlemleri
 * 
 * Swagger dokÃ¼mantasyonunda "Reports" adÄ±nda bir grup (tag) tanÄ±mlanÄ±yor.
 * Bu grup altÄ±nda raporlama ile ilgili tÃ¼m endpoint'ler listelenecek.
 */

// ğŸ“Œ 1. Aktif hat sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rÃ¼r
/**
 * @swagger
 * /api/reports/active-sim-count:
 *   get:
 *     summary: Aktif hat sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rÃ¼r
 *     tags: [Reports]
 *     responses:
 *       200:
 *         description: BaÅŸarÄ±lÄ±
 */
router.get(
  '/active-sim-count',                     // API endpoint URL'si
  auth(['admin', 'user']),                  // Sadece admin ve user yetkisine sahip kullanÄ±cÄ±lar eriÅŸebilir
  reportsController.activeSimCardCount      // Ä°stek geldiÄŸinde Ã§alÄ±ÅŸacak controller fonksiyonu
);

// ğŸ“Œ 2. OperatÃ¶r bazlÄ± hat daÄŸÄ±lÄ±mÄ± raporu (SimCard â†’ Package â†’ Operator)
/**
 * @swagger
 * /api/reports/operator-distribution:
 *   get:
 *     summary: SimCard tablosu Ã¼zerinden operatÃ¶r bazlÄ± hat daÄŸÄ±lÄ±mÄ±
 *     tags: [Reports]
 *     responses:
 *       200:
 *         description: BaÅŸarÄ±lÄ±
 */
router.get(
  '/operator-distribution',
  auth(['admin', 'user']),
  reportsController.operatorDistribution
);

// ğŸ“Œ 2b. Allocations tablosundan operatÃ¶r bazlÄ± daÄŸÄ±lÄ±m
/**
 * @swagger
 * /api/reports/operator-distribution-from-allocations:
 *   get:
 *     summary: Allocations tablosu Ã¼zerinden operatÃ¶r bazlÄ± hat daÄŸÄ±lÄ±mÄ±
 *     tags: [Reports]
 *     responses:
 *       200:
 *         description: BaÅŸarÄ±lÄ±
 */
router.get(
  '/operator-distribution-from-allocations',
  auth(['admin', 'user']),
  reportsController.operatorDistributionFromAllocations
);

// ğŸ“Œ 3. MÃ¼ÅŸteri bazlÄ± tahsisat raporu
/**
 * @swagger
 * /api/reports/customer-allocations:
 *   get:
 *     summary: MÃ¼ÅŸteri bazlÄ± tahsisat raporu
 *     tags: [Reports]
 *     responses:
 *       200:
 *         description: BaÅŸarÄ±lÄ±
 */
router.get(
  '/customer-allocations',
  auth(['admin', 'user']),
  reportsController.customerAllocations
);

// ğŸ“Œ 4. Tarihe gÃ¶re tahsisat raporu
/**
 * @swagger
 * /api/reports/allocations-by-date:
 *   get:
 *     summary: Tarihe gÃ¶re tahsisat raporu
 *     tags: [Reports]
 *     responses:
 *       200:
 *         description: BaÅŸarÄ±lÄ±
 */
router.get(
  '/allocations-by-date',
  auth(['admin', 'user']),
  reportsController.allocationsByDate
);

// ğŸ”¹ Test endpoint: operatÃ¶r daÄŸÄ±lÄ±mÄ±nÄ± kontrol etmek iÃ§in
router.get('/operator-distribution-test', async (req, res) => {
  try {
    await reportsController.operatorDistributionFromAllocations(
      { query: {} },
      { json: (output) => res.json(output) }
    );
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ğŸ“Œ Router'Ä± dÄ±ÅŸa aktarÄ±yoruz ki app.js veya index.js gibi ana dosyada kullanÄ±labilsin
module.exports = router;

// Bu dosya, raporlama ile ilgili API endpoint'lerini tanÄ±mlar. 
// Her endpoint iÃ§in ilgili controller fonksiyonunu ve yetki kontrolÃ¼nÃ¼ (auth middleware) belirtir. 
// Swagger yorumlarÄ±, otomatik API dokÃ¼mantasyonu oluÅŸturmak iÃ§in kullanÄ±lÄ±r.
